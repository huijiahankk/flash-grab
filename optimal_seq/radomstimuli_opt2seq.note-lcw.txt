Random Stimulus Sequences, Part 1: optseq2
Optseq2 is a program in the FreeSurfer package for generating random stimulus sequences. In the homepage, you can download the program, view a .ppt w/ more information, and some practice exercises: http://surfer.nmr.mgh.harvard.edu/optseq/
Open a terminal window to run the program w/ Unix commands. Set the following parameters:
set tr = 2 (or however many seconds for each trial)
set numev = 30 (or however many trials of each stimulus you will show each run. For example, if 150 trials/run, and 4 stimuli, you could have 30 stimuli/run. numev = 30)
set numtar = 20 (however many trials of a target stimulus you want to show per trial. The target is an extra stimulus that the subject will respond to just to make sure they're paying attention. Here, there's 150-120 = 30 trials left over, so we can make 20 of those target trials. The remaining 10 trials will automatically be made into control trials.)
set out = Example (whatever you want your filename to be)
For the number of total TR's, you may want to manually add 5 NULL's to the end of an RER run to ensure that the last stimulus response has time to rise and fall. So, if you're doing a 150 TR run, you may want to set -ntp 145 and then manually add 5 NULL's to the end yourself.
Then, you'll run the program (change the 1st line if optseq2 isn't in Applications/freesurfer/bin):
/Applications/freesurfer/bin/optseq2 \
--tsearch 0.001 \
--psdwin 0 16 2 \
--nkeep 8 --o {$out} \
--ntp 150 --tr {$tr} \
--polyfit 2 --focb 1 \
--ev stimulus1 {$tr} $numev \
--ev stimulus2 {$tr} $numev \
--ev stimulus3 {$tr} $numev \
--ev stimulus4 {$tr} $numev \
--ev stimulus5 {$tr} $numev \
--ev target {$tr} $numtar
tsearch is the number of hours you want the program to run. nkeep is the number of total runs. ntp sets the number of trials/run.
Since there are 8 runs in this example, there will be 8 output files which look like Example-001.par . 
Each file will have 5 columns. Left-most column has the exact time (in seconds) that the stimulus is shown, 
2nd column is the numerical value which corresponds to each stimulus type (in this example 0-6, 0 corresponding to control), 
3rd column is number of seconds of each trial, 
4th column is ????, and right-most column is whatever name you gave to each stimulus event (like "stimulus1" in this example).



Random Stimulus Sequences, Part 2: Matlab

Optseq2 generates a list of what order to show the stimuli in, but does not tell you exactly what stimulus to show. For instance, 
it might tell you to present face,face,house,face but we have multiple pictures of faces and houses. 
Therefore, a second step is necessary to translate the optseq ordering into actual stimulus files. 
This can be easily done in matlab. Click here for a sample matlab program (others can be found in /Volumes/data1/lahti0/MikeOldMac/PsychNIH/ Image:TacAMv8.m


#########==============TacAMv8.m===========##########

% TacAMv8.m 
% Reads in a random stimulus sequence generated by optseq (for n runs)
% and selected lists of stimuli
% then assigns a (non-repeated) stimulus to each event in the sequence

% number of stimulus types
numstimtype = 2;
% stimulus names for filename output
stimtypes = { 'AM','TM'};
% number of runs
numruns = 4;
% number of stimuli per run
numstim = 150;
% how long each stimulus lasts
stimtime = 2;
% max number of stim 
totalstims = numruns*numstim;
% Array containing stim types
stimseq = zeros(numruns, numstim);
% Array containing clip names to save to disk
clipfile = cell(numruns,numstim);


% Read in clips
cd  /Volumes/data1/stimuli/NIHStimuli/ASD/
[Actionmovies, numActionmovies] = ReadPaths('ActionMoviesList.txt');
[Toolmovies, numToolmovies] = ReadPaths('ToolMoviesList.txt');
txt = sprintf('Read in %i actionmovies, %i toolmovies. ',numActionmovies,numToolmovies);
disp(txt);


% change to directory that contains stimulus order files 
cd /Users/mbeauchamp/data1/UT/TacAM

% Stimulus prefix (from optseq2)
out = 'Tacv8';

for i = 1:numruns
% Read in stimulus sequences
% in optseq, first column is "real time", second is stim type (numeric code)
% third is duration, fourth is stim type (name) 
% this is a hack to get around 0-10
if i < 10
	fname = [out,'-00',num2str(i),'.par'];
else
	fname = [out,'-0',num2str(i),'.par'];
end

[stimonset,stimtype,stimlength,stimname,junk] =  textread(fname,'%f%n%f%s%f','delimiter',' ');

% optseq has the annoying habit of not listing multiple nulls in a row;
% convert so each run has exactly the same number of stimuli
j = 1;
for ctr = 1:length(stimname)
    for k=1:stimlength(ctr)/stimtime
		stimseq(i,j) = stimtype(ctr); 
        j = j + 1;
	end
end

end % end reading in stimulus sequence files


% Go through each run, assigning stimuli
% For now, we use a simple algorithm, assuming that the total number of
% each clip type is less than the number of presentations
% we also ignore that there are different categories of stimuli
% e.g. might get 4 flippers, no pitcher by change
% could change so that it picks one from each category, etc.
am = randperm(numActionmovies); amctr = 1;
tm = randperm(numToolmovies); tmctr = 1;
% if have too few clips, just make consecutive permutations e.g. for tool stills
% ts = [ randperm(numToolstills)  randperm(numToolstills)]; tsctr = 1;

for i=1:numruns
am = randperm(numActionmovies); amctr = 1;
tm = randperm(numToolmovies); tmctr = 1;
for j=1:numstim
		switch stimseq(i,j) 
			case 0, clipfile{i,j} = 'NULL';
			case 1, clipfile{i,j} = Actionmovies(am(amctr)); amctr = amctr + 1;
			case 2, clipfile{i,j} = Toolmovies(tm(tmctr)); tmctr = tmctr + 1;
			otherwise, disp('ERROR: UNPLANNED STIMULUS TYPE!')
		end
	end
end


% New version of presentation stimulus presentation program wants the order and the stimuli themselves
fname = [out '.txt' ]
%fname = ['Tacv7.txt'];


fid = fopen(fname,'wt');
fprintf(fid,'{\n');  % initial { for 2D array
for i=1:numruns
    j=1;
    fprintf(fid,'{"%s"',char(clipfile{i,j}));
	for j=2:numstim
        % comma before every one except the first one
		fprintf(fid,',"%s"',char(clipfile{i,j}));
    end
    if i < numruns fprintf(fid,'},\n'); end;  % don't need comma after very last one
end
fprintf(fid,'}\n};\n');  % final }; for 2D array
fclose(fid);

% check to make sure file is OK; note that have to manually delete very
% last "," in the file
cmd = ['!cat ',fname];
eval(cmd)


% write out timing of each stimulus for use as regressors by 3dDeconvolve
% with -stim_times option
% create a separate regressor for each clip type, with the time of each
% stimlus in each run on a separate row (then if we don't use all runs,
% just ignore those rows, or swap order of rows if run ordering is
% different; can't do this with column format
% parameters

% actual number of runs
actualnumruns = 2;
stimvals = [1 2];

% TR for timing purposes
tr = 2;
for i=1:numstimtype
    fname = char(strcat(out,stimtypes(i),'.txt'));
    fid = fopen(fname,'wt');
    fprintf(fid,''); % 
    for j=1:actualnumruns   % assume we have at least one stim of each type per run; if not we need to include a "*"
        curtime = 0;
        for k=1:numstim
            if ( isequal( stimseq(j,k) , stimvals(i) ) )
               	fprintf(fid,'%i ',curtime); % time of each stimulus, separated by spaces
            end
            curtime = curtime + tr;
        end
        fprintf(fid,'\n'); % end of the run, go to next line
    end
    fclose(fid); % end of that stimulus, close file
    cmd = ['!cat ',fname];
    eval(cmd)
end
